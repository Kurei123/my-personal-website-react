name: Deploying to Production (Google Cloud Platform VM)

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - development
    types:
      - closed

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'master')
    steps:
    - name: Checkout source code
      uses: actions/checkout@v3

    - name: Setting up NodeJS Environment
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    - name: Build project
      run: npm run build

    - name: Sync files to server
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        VM_USERNAME: ${{ secrets.VM_USERNAME }}
        VM_IP: ${{ secrets.VM_IP }}
      run: |
        echo "$SSH_PRIVATE_KEY" > key.pem
        chmod 600 key.pem
        
        # Sync only the build output and necessary files
        rsync -avz -e "ssh -i key.pem -o StrictHostKeyChecking=no" --delete .next/ public/ package.json package-lock.json $VM_USERNAME@$VM_IP:/var/www/website-portfolio/

        # Sync standalone build 
        rsync -avz -e "ssh -i key.pem -o StrictHostKeyChecking=no" .next/standalone/ $VM_USERNAME@$VM_IP:/var/www/website-portfolio/

    - name: Configure and start application
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        VM_USERNAME: ${{ secrets.VM_USERNAME }}
        VM_IP: ${{ secrets.VM_IP }}
      run: |
        echo "$SSH_PRIVATE_KEY" > key.pem
        chmod 600 key.pem
        
        ssh -i key.pem -o StrictHostKeyChecking=no $VM_USERNAME@$VM_IP << EOF
          # Ensure correct permissions
          sudo chown -R $VM_USERNAME:$VM_USERNAME /var/www/website-portfolio

          # Remove old files with sudo
          sudo rm -rf /var/www/website-portfolio/*

          # Recreate directory and set permissions
          sudo mkdir -p /var/www/website-portfolio
          sudo chown -R $VM_USERNAME:$VM_USERNAME /var/www/website-portfolio
          
          cd /var/www/website-portfolio

          # Install dependencies
          npm install --production

          # Ensure PM2 is installed
          if ! command -v pm2 &> /dev/null
          then
            echo "PM2 not found, installing..."
            sudo npm install -g pm2
          else
            echo "PM2 is already installed"
          fi

          # Delete existing PM2 process if it exists
          if pm2 list | grep -q "website-portfolio"
          then
            echo "Deleting existing PM2 process..."
            pm2 delete website-portfolio
          else
            echo "PM2 process not found"
          fi

          # Start the Next.js application with PM2
          pm2 start /var/www/website-portfolio/standalone/server.js --name "website-portfolio" || true

          # Save the PM2 process list
          pm2 save

          # Reload nginx (if needed)
          sudo systemctl reload nginx
        EOF
      shell: bash
