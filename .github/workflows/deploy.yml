name: Deploying to Production (Google Cloud Platform VM)

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - development
    types:
      - closed

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'master')
    steps:
    - name: Checkout source code
      uses: actions/checkout@v3

    - name: Configuring Directory Permissions
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        VM_USERNAME: ${{ secrets.VM_USERNAME }}
        VM_IP: ${{ secrets.VM_IP }}
      run: |
        echo "$SSH_PRIVATE_KEY" > key.pem
        chmod 600 key.pem

        ssh -i key.pem -o StrictHostKeyChecking=no $VM_USERNAME@$VM_IP "sudo mkdir -p /var/www/website-portfolio/.next"
        ssh -i key.pem -o StrictHostKeyChecking=no $VM_USERNAME@$VM_IP "sudo mkdir -p /var/www/website-portfolio/public"
        ssh -i key.pem -o StrictHostKeyChecking=no $VM_USERNAME@$VM_IP "sudo chown -R $VM_USERNAME:$VM_USERNAME /var/www/website-portfolio"

    - name: Sync files to server and Configration ng nginx.conf
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        VM_USERNAME: ${{ secrets.VM_USERNAME }}
        VM_IP: ${{ secrets.VM_IP }}
      run: |
        echo "$SSH_PRIVATE_KEY" > key.pem
        chmod 600 key.pem

        # Sync static
        rsync -avz --exclude 'node_modules' -e "ssh -i key.pem -o StrictHostKeyChecking=no" . $VM_USERNAME@$VM_IP:/var/www/website-portfolio/

        # For deplying nginx config
        rsync -avz -e "ssh -i key.pem -o StrictHostKeyChecking=no" deploy/nginx.conf $VM_USERNAME@$VM_IP:/tmp/nginx.conf

        # Updating nginx configuration
        ssh -i key.pem -o StrictHostKeyChecking=no $VM_USERNAME@$VM_IP << EOF
          sudo mv /tmp/nginx.conf /etc/nginx/sites-available/default
          sudo nginx -t  # Test the configuration
          sudo systemctl reload nginx
        EOF

    - name: Configure and Start application
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        VM_USERNAME: ${{ secrets.VM_USERNAME }}
        VM_IP: ${{ secrets.VM_IP }}
      run: |
        echo "$SSH_PRIVATE_KEY" > key.pem
        chmod 600 key.pem
        
        ssh -i key.pem -o StrictHostKeyChecking=no $VM_USERNAME@$VM_IP << EOF

          cd /var/www/website-portfolio

          # Ensure package.json is present before running npm install
          if [ -f package.json ]; then
            # Install dependencies
            npm install --production
          else
            echo "package.json not found. Exiting."
            exit 1
          fi
          
          # Build the project
          npm run build

          # Ensure PM2 is installed
          if ! command -v pm2 &> /dev/null
          then
            echo "PM2 not found, installing..."
            sudo npm install -g pm2
          else
            echo "PM2 is already installed"
          fi

          # Delete existing PM2 process if it exists
          if pm2 list | grep -q "website-portfolio"
          then
            echo "Deleting existing PM2 process..."
            pm2 delete website-portfolio
          else
            echo "PM2 process not found"
          fi

          # Start the Next.js application with PM2
          pm2 start /var/www/website-portfolio/standalone/server.js --name "website-portfolio" || true

          # Save the PM2 process list
          pm2 save

          # Reload nginx (if needed)
          sudo systemctl reload nginx
        EOF
      shell: bash
